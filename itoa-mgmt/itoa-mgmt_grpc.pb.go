// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: itoa-mgmt/itoa-mgmt.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItoaMgmtClient is the client API for ItoaMgmt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItoaMgmtClient interface {
	CreateNewAnalytics(ctx context.Context, in *AnalyticsInput, opts ...grpc.CallOption) (*Result, error)
}

type itoaMgmtClient struct {
	cc grpc.ClientConnInterface
}

func NewItoaMgmtClient(cc grpc.ClientConnInterface) ItoaMgmtClient {
	return &itoaMgmtClient{cc}
}

func (c *itoaMgmtClient) CreateNewAnalytics(ctx context.Context, in *AnalyticsInput, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/fairwinds0099.itoagrpc.ItoaMgmt/CreateNewAnalytics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItoaMgmtServer is the server API for ItoaMgmt service.
// All implementations must embed UnimplementedItoaMgmtServer
// for forward compatibility
type ItoaMgmtServer interface {
	CreateNewAnalytics(context.Context, *AnalyticsInput) (*Result, error)
	mustEmbedUnimplementedItoaMgmtServer()
}

// UnimplementedItoaMgmtServer must be embedded to have forward compatible implementations.
type UnimplementedItoaMgmtServer struct {
}

func (UnimplementedItoaMgmtServer) CreateNewAnalytics(context.Context, *AnalyticsInput) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewAnalytics not implemented")
}
func (UnimplementedItoaMgmtServer) mustEmbedUnimplementedItoaMgmtServer() {}

// UnsafeItoaMgmtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItoaMgmtServer will
// result in compilation errors.
type UnsafeItoaMgmtServer interface {
	mustEmbedUnimplementedItoaMgmtServer()
}

func RegisterItoaMgmtServer(s grpc.ServiceRegistrar, srv ItoaMgmtServer) {
	s.RegisterService(&ItoaMgmt_ServiceDesc, srv)
}

func _ItoaMgmt_CreateNewAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItoaMgmtServer).CreateNewAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwinds0099.itoagrpc.ItoaMgmt/CreateNewAnalytics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItoaMgmtServer).CreateNewAnalytics(ctx, req.(*AnalyticsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ItoaMgmt_ServiceDesc is the grpc.ServiceDesc for ItoaMgmt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItoaMgmt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fairwinds0099.itoagrpc.ItoaMgmt",
	HandlerType: (*ItoaMgmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewAnalytics",
			Handler:    _ItoaMgmt_CreateNewAnalytics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "itoa-mgmt/itoa-mgmt.proto",
}
